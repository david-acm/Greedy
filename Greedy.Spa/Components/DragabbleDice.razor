<MudDropContainer T="DropItem"
                  Items="_items"
                  ItemsSelector="@((item, dropzone) => item.Identifier == dropzone)"
                  ItemDropped="ItemUpdated"
                  Class="d-flex flex-wrap flex-column flex-grow-1">
  <ChildContent>

    <MudDropZone T="DropItem"
                 Identifier="Rolled"
                 Class="rounded mud-background-gray pa-6 d-flex flex-row flex-wrap flex-grow-1 justify-center">
      <MudText Typo="Typo.h6"
               Class="mb-4">
        Rolled
      </MudText>
    </MudDropZone>
    <MudDropZone T="DropItem"
                 Identifier="Kept" 
                 Class="rounded mud-background-gray pa-6 d-flex flex-row flex-wrap flex-grow-1 justify-center">
      <MudText Typo="Typo.h6"
               Class="mb-4">
        Keep
      </MudText>
    </MudDropZone>

  </ChildContent>
  <ItemRenderer>
    <MudItem Class="d-flex align-center ma-8 ma-8">
      <Die IsDragging=@true 
           DiceValue="context.Value" 
           Size="50"></Die>
    </MudItem>
  </ItemRenderer>
</MudDropContainer>

@code {

  private void ItemUpdated(MudItemDropInfo<DropItem> dropItem) {
    dropItem.Item.Identifier = dropItem.DropzoneIdentifier;
  }

  [Parameter]
  public List<DiceValue> DiceValues { get; set; }

  private List<DropItem> _items = new();

  protected override void OnInitialized()
    => _items = DiceValues.Select(d => new DropItem()
    {
      Value = d,
      Identifier = "Rolled"
    }).ToList();

  protected override void OnParametersSet() {
    for (var i = 0; i < _items.Count; i++)
    {
      _items.ElementAt(i).Value = DiceValues.ElementAt(i);
    }

    base.OnParametersSet();
  }

  public class DropItem {
    public DiceValue Value { get; set; }
    public string? Identifier { get; set; }
  }

}