@using FluentAssertions
@using AngleSharp.Dom
@using System.Text.RegularExpressions
@inherits TestContext

These tests are written entirely in razor and C# syntax.

Learn more at https://bunit.dev/docs/getting-started/writing-tests.html#creating-basic-tests-in-razor-files

@code {

  [Theory]
  [InlineData(1, 105, 0, 15)]
  [InlineData(3, 15, 255, 0)]
  [InlineData(2, 15, 165, 0)]
  [InlineData(4, 15, 345, 0)]
  [InlineData(5, 15, 75, 0)]
  [InlineData(6, -75, 0, -15)]
  public void RotatesCorrectly(int number,
    int xRotationExpected,
    int yRotationExpected,
    int zRotationExpected) {
    // Arrange
    var cut = Render(@<Die Number="@number"/>);

    // Assert that content of the paragraph shows counter at zero
    var innerHtml = cut.Find("style").InnerHtml;
    TryGetNumberFrom(@"rotateX\((-?\d+)deg\)", innerHtml, out var xRotation);
    TryGetNumberFrom(@"rotateY\((-?\d+)deg\)", innerHtml, out var yRotation);
    TryGetNumberFrom(@"rotateZ\((-?\d+)deg\)", innerHtml, out var zRotation);
    (xRotation % 360).Should().Be(xRotationExpected);
    (yRotation % 360).Should().Be(yRotationExpected);
    (zRotation % 360).Should().Be(zRotationExpected);
  }

  private bool TryGetNumberFrom(string pattern, string text, out int result) {
  // var pattern = @"rotate\((\d+)deg\)";
    result = 0;

    var match = Regex.Match(text, pattern);

    if (!match.Success) return false;
    var number = match.Groups[1].Value;

    return int.TryParse(number, out result);
  }

}