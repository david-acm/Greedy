@using FluentAssertions
@using AngleSharp.Dom
@using System.Text.RegularExpressions
@using AutoFixture
@using AutoFixture.AutoMoq
@using AutoFixture.Xunit2
@using Moq
@inherits TestContext

These tests are written entirely in razor and C# syntax.

Learn more at https://bunit.dev/docs/getting-started/writing-tests.html#creating-basic-tests-in-razor-files

@code {

  [Theory]
  [AutoData]
  public void RotatesCorrectly(
    DiceValue value,
    int xExpected,
    int yExpected,
    int zExpected) {
  // Arrange
    var mock = Mock.Of<IRotationCalculator>();
    Mock.Get(mock)
      .Setup(c => c.CalculateFor(value))
      .Returns((xExpected, yExpected, zExpected));
    Services.AddScoped<IRotationCalculator>(_ => mock);
    
    // Act
    var cut = RenderComponent<Die>(c => c.Add(d => d.DiceValue, value));

    // Assert
    cut.WaitForAssertion(() =>
    {
      var innerHtml = cut.Find("style").InnerHtml;
      TryGetNumberFrom(@"rotateX\((-?\d+)deg\)", innerHtml, out var xRotation);
      TryGetNumberFrom(@"rotateY\((-?\d+)deg\)", innerHtml, out var yRotation);
      TryGetNumberFrom(@"rotateZ\((-?\d+)deg\)", innerHtml, out var zRotation);
      (xRotation % 360).Should().Be(xExpected);
      (yRotation % 360).Should().Be(yExpected);
      (zRotation % 360).Should().Be(zExpected);
    }, TimeSpan.FromMilliseconds(100));
  }

  private bool TryGetNumberFrom(string pattern, string text, out int result) {
  // var pattern = @"rotate\((\d+)deg\)";
    result = 0;

    var match = Regex.Match(text, pattern);

    if (!match.Success) return false;
    var number = match.Groups[1].Value;

    return int.TryParse(number, out result);
  }
}
